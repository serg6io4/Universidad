
-------------------------------------------------------------------------------------------------------------------------------------------

/*No he podido realizar las capturas, debido a que jSSLKeyLog.jar no pude abrirlo con las herramientas de eclipse y con los pasos del pdf.
Y en la segunda captura no he podido captar las tramas http2 aún teniendo desactivado el antivirus.
Solo puedo aportar el código que he podido realizar.*/
-------------------------------------------------------------------------------------------------------------------------------------------
package es.uma.rysd.app;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;

import javax.net.ssl.HttpsURLConnection;

import com.google.gson.Gson;

import es.uma.rysd.entities.TokenResponse;
import es.uma.rysd.entities.Category;
import es.uma.rysd.entities.CategoryResponse;
import es.uma.rysd.entities.Question;
import es.uma.rysd.entities.QuestionResponse;

public class TriviaClient {
    private String token = null;
    
    // TODO: Completar el nombre de la aplicación indicando sus nombres
    private final String app_name = "TRIVIALAZO DE LA MUERTE";
    
    private final String url_api = "https://opentdb.com/";
    private final String get_token = url_api + "api_token.php?command=request";
    private String categories = url_api + "api_category.php";
    private final String questions = url_api + "api.php";
    
    public TriviaClient() {
		super();
        // TODO: Crear una conexión a la url indicada en get_token
		try {
			URL direccion = new URL(get_token);
		
        // TODO: Indicar el método GET y que el mensaje NO lleva datos
			HttpsURLConnection conectado = (HttpsURLConnection)(direccion.openConnection());
			conectado.setRequestMethod("GET");
			conectado.setDoOutput(false);
        // TODO: Añadir las cabeceras User-Agent con el nombre de su aplicación y 
		// 		 Content-Type y Accept con el valor "application/json"
			conectado.setRequestProperty("User-Agent", app_name);
			conectado.setRequestProperty("Content-Type", "application/json");
			conectado.setRequestProperty("Accept", "application/json");
        // TODO: Obtener el código de respuesta y comprobar que es correcto
			int code = conectado.getResponseCode();
			
			if(200 <= code && code <=299) {//si está en 2xx la confirnmación es positiva, sin errores
				System.out.println("Código de respuesta válido");
			} else throw new Exception("Código respuesta inválido");//será entre 3xx y 5xx
        // TODO: Obtener el flujo de entrada (InputStream) y deserializar su contenido en un objeto de tipo TokenResponse usando Gson
			
			Gson parser = new Gson();
			InputStream in = conectado.getInputStream(); // TODO: indicar el de la conexión(hecho)
			TokenResponse r = parser.fromJson(new InputStreamReader(in), TokenResponse.class);
			
        // TODO: Almacenar el token en el atributo token
			token = r.token;
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
    }

    Category [] getCategories(){
        // TODO: Crear una conexión a la url indicada en categories
    		try {
				URL direccion = new URL(categories);
			
        // TODO: Indicar el método GET y que el mensaje NO lleva datos
				HttpsURLConnection conectado = (HttpsURLConnection)(direccion.openConnection());
				conectado.setRequestMethod("GET");
				conectado.setDoOutput(false);
        // TODO: Añadir las cabeceras User-Agent con el nombre de su aplicación y 
		// 		 Content-Type y Accept con el valor "application/json"
				conectado.setRequestProperty("User-Agent", app_name);
				conectado.setRequestProperty("Content-Type", "application/json");
				conectado.setRequestProperty("Accept", "application/json");
        
        // TODO: Obtener el código de respuesta y comprobar que es correcto
				int code = conectado.getResponseCode();
				
				if(200 <= code && code <=299) {//si está en 2xx la confirnmación es positiva, sin errores
					System.out.println("Código de respuesta válido");
        // TODO: Obtener el flujo de entrada (InputStream) y deserializar su contenido en un objeto de tipo CategoryResponse usando Gson
					Gson parser = new Gson();
					InputStream in = conectado.getInputStream(); // TODO: indicar el de la conexión(hecho)
					CategoryResponse r = parser.fromJson(new InputStreamReader(in), CategoryResponse.class);
        // TODO: Devuelva el atributo trivia_categories del objeto deserializado
					Category [] categorias = r.trivia_categories;
					return r.trivia_categories;}
				
				}catch (MalformedURLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    				return null;
    }
    
    Question [] getQuestions(Integer amount, Integer category, String difficulty){
        // TODO: Crear una conexión a la url indicada en questions
    		try {
				StringBuilder cadena= new StringBuilder();
				cadena.append(questions).append("?amount=").append(amount).append("&difficulty=").append(difficulty);
				if(category!=null) {
					cadena.append("&category=").append(categories);
					cadena.append("&encode=url3986&token=").append(token);
				}
    	//Añada los parámetros recibidos en la llamada al método y los atributos encode=url3986 y token=<token dela clase>
    	// Un ejemplo: https://opentdb.com/api.php?amount=5&difficulty=easy&category=1&encode=url3986&token=XXXX
    	// Si el parámetro category es null, en la URL no debe aparecer el parámetro category
    	
        // TODO: Indicar el método GET y que el mensaje NO lleva datos
				HttpsURLConnection conectado = (HttpsURLConnection)new URL(cadena.toString()).openConnection();
				conectado.setRequestMethod("GET");
				conectado.setDoOutput(false);
        // TODO: Añadir las cabeceras User-Agent con el nombre de su aplicación y 
		// 		 Content-Type y Accept con el valor "application/json"
				conectado.setRequestProperty("User-Agent", app_name);
				conectado.setRequestProperty("Content-Type", "application/json");
				conectado.setRequestProperty("Accept", "application/json");
        // TODO: Obtener el código de respuesta y comprobar que es correcto
				int code = conectado.getResponseCode();
				if(200 <= code && code <=299) {//si está en 2xx la confirnmación es positiva, sin errores
					System.out.println("Código de respuesta válido");
        // TODO: Obtener el flujo de entrada (InputStream) y deserializar su contenido en un objeto de tipo QuestionResponse usando Gson
					Gson parser = new Gson();
					InputStream in = conectado.getInputStream(); // TODO: indicar el de la conexión(hecho)
					QuestionResponse r = parser.fromJson(new InputStreamReader(in), QuestionResponse.class);
        // TODO: Devuelva el atributo results del objeto deserializado
					Integer codigo_respuesta = r.response_code;
					Question [] questions = r.results;
					return questions;}
			
    		} catch (MalformedURLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        return null;
    }
}
